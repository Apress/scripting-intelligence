Book Examples for PART 2
------------------------

Part 2 of the book deals with the Semantic Web. We also use Semantic
Web technology later in the book.

Required Ruby gems:

gem install sinatra json mongrel --no-rdoc --no-ri


Chapter 4
---------

Chapter 4 is a tutorial on RDF, RDFS, OWL, and SPARQL. There are no
programming examples in Chapter 4 but you may want to refer to the
RDF source files in src/part2/data as you read through Chapter 4.

Chapter 5
---------

== Redland:

Here are the first sample code snippet in the section on setting up Redland with the Ruby bindings:

$ ruby redland_demo.rb 
Parsing added 7 statements from file file:data/sample_news.nt

Query:  SELECT ?s ?o WHERE { ?s <http:://knowledgebooks.com/ontology/#summary> ?o } 
	<http://kbsportal.com/oak_creek_flooding />
	"Oak Creek flooded last week affecting 5 businesses"

	<http://kbsportal.com/bear_mountain_fire />
	"The fire on Bear Mountain was caused by lightening"


== Using the Sesame RDF Data Store:

If you have Java installed, then it is simple to get setup running Tomcat and Sesame
as per the instructions in the book. The only problem that you might have is if you
are running Linux and GNU Java is installed instead of Sub's Java or OpenJDK. Check the
version using:

$ java -version
java version "1.5.0_16"
Java(TM) 2 Runtime Environment, Standard Edition (build 1.5.0_16-b06-284)
Java HotSpot(TM) Client VM (build 1.5.0_16-133, mixed mode, sharing)

or:

root@domU-12-31-39-03-2C-82:~# java -version
java version "1.6.0_10"
Java(TM) SE Runtime Environment (build 1.6.0_10-b33)
Java HotSpot(TM) Client VM (build 11.0-b15, mixed mode, sharing)

You might want to try my AMI (see Appendix A) that has Sesame and Tomcat
all setup.

You can try running Sesame embedded in a JRuby test script by:

cd src/part2/jruby_sesame
markws-macbook:jruby_sesame markw$ jruby test.rb 
Matching subject: http://knowledgebooks.com/test#MarkWatsonSoftware
         predicate: http://knowledgebooks.com/test#Customer

(I did not show some INFO level debug printout that you will see when you run this.)




== Using the AllegroGraph RDF Data Store:

You need to follow the instructions in the book for downloading and
installing AllegroGraph (or, use my AMI).

You need to start the AllegroGraph server:

cd ~/agraph-fje-3.2
./AllegroGraphServer --http-port 8111

The Ruby AllegroGraph example programs from my book are in the
directory ~/src/part2

Here is a client example running:

root@domU-12-31-39-03-2C-82:~/src/part2# ruby activerdf_agraph_test.rb
** conectiong to AllegroGraph server...
<?xml version="1.0"?>
<!-- Generated by AllegroGraph 3.2 -->
<sparql xmlns="http://www.w3.org/2005/sparql-results#">
  <head>
    <variable name="s"/>
  </head>
  <results>
    <result>
      <binding name="s">
        <uri>http://xmlns.com/foaf/0.1/Agent</uri>
      </binding>
    </result>
    <result>
      <binding name="s">
        <uri>http://xmlns.com/foaf/0.1/Person</uri>
      </binding>
    </result>
    <result>
      <binding name="s">
        <uri>http://xmlns.com/foaf/0.1/Organization</uri>
      </binding>
    </result>
  </results>
</sparql>
root@domU-12-31-39-03-2C-82:~/src/part2# 



Chapter 6
---------

Chapter 6 is a tutorial on using SPARQL queries - there are no sample programs
for this chapter.


Chapter 7
---------

I implement a SPARQL end point web service in this chapter that uses either
the Redland RDF data store (using Ruby) or the Sesame data store (using JRuby).

Start by changing directories to the top level subdirectory for this Sintra-based
example:

cd src/part2/sparql_endpoint_web_service

First, start the server:

$ ruby portal.rb 
Loading RedlandBackend...
== Sinatra/0.9.2 has taken the stage on 4567 for development with backup from Mongrel


And, then start a test client:

$ ruby test_client.rb 
Example query:
SELECT ?s ?o WHERE { ?s <http://knowledgebooks.com/ontology/#summary> ?o }

Enter a SPARQL query:
SELECT ?s ?o WHERE { ?s <http://knowledgebooks.com/ontology/#summary> ?o }
http://localhost:4567/?concise&dot&query=SELECT+%3Fs+%3Fo+WHERE+%7B+%3Fs+%3Chttp%3A%2F%2Fknowledgebooks.com%2Fontology%2F%23summary%3E+%3Fo+%7D
Results:
[["<http://kbsportal.com/bear_mountain_fire />",
  "The fire on Bear Mountain was caused by lightening"],
 ["<http://kbsportal.com/oak_creek_flooding />",
  "Oak Creek flooded last week affecting 5 businesses"]]



